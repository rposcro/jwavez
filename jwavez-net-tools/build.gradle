plugins {
    id 'org.springframework.boot' version '2.5.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'application'
    id 'com.jwavez.java-conventions'
}

apply {
    'java'
    'io.spring.dependency-management'
}

ext {
    springShellVersion = '2.0.1.RELEASE'
    jacksonVersion = '2.11.4'
    commonsCliVersion = '1.4'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

jar {
    duplicatesStrategy = "exclude"
    manifest {
        attributes(
                "Implementation-Title": "JWaveZ Net Tools",
                "Implementation-Version": archiveVersion,
                "Main-Class": "com.rposcro.jwavez.tools.shell.JWaveZShell"
        )
    }
}

dependencies {
    implementation project(':jwavez-core')
    implementation project(':jwavez-serial')

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.shell:spring-shell-starter:${springShellVersion}"

    implementation "commons-cli:commons-cli:${commonsCliVersion}"
    //implementation 'jakarta.validation:jakarta.validation-api:3.0.0'

    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
}

task _packCreateDir {
    doLast {
        mkdir "$buildDir/jwz"
    }
}

task _packCopyArchives(type: Copy) {
    dependsOn _packCreateDir
    from(bootJar.archiveFile) {
        rename { fileName -> bootJar.archiveBaseName.get() << ".jar" }
    }
    from("src/main/bash") {
        include "*"
    }
    into "$buildDir/jwz"
}

task _packZipArchives(type: Zip) {
    dependsOn _packCopyArchives
    archiveFileName = "jwz.zip"
    destinationDirectory = buildDir

    from("$buildDir") {
        include "jwz/*"
    }
}

task pack {
    dependsOn _packZipArchives
}

task deployLocal(type: Copy) {
    dependsOn _packCopyArchives
    from("$buildDir/jwz") {
        include "*"
    }
    into "file://" + System.properties["user.home"] + "/bin"
}
